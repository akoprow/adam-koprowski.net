<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE papers [
<!ELEMENT papers (group*)>
<!ELEMENT group (paper*)>
<!ATTLIST group  id CDATA #REQUIRED>
<!ELEMENT paper (authors, title, 
	(journal | conference | workshop-proceedings | techreport | phdthesis | masterthesis | unpublished), 
	img?, abstract, download)>
<!ATTLIST paper  id ID #REQUIRED>

<!ELEMENT conference (name, abbreviation?, location, url?, series, volume, pages, note?)>
<!ELEMENT workshop-proceedings (name, abbreviation?, location, url?, pages, note?)>
<!ELEMENT journal (name, volume, number, pages)>
<!ELEMENT techreport (type, number, institution, address?, month?)>
<!ELEMENT phdthesis (school, address, month?, isbn?)>
<!ELEMENT masterthesis (school, address, month?, isbn?)>
<!ELEMENT unpublished (note)>

<!ELEMENT authors (author*)>
<!ELEMENT download ((pdf | ps | resource)*)>
<!ELEMENT resource (name, url)>
]>

<papers>

	<group id="2010">
		<paper id="hybrid-ITP-10">
			<authors>
				<author>Herman Geuvers</author>
				<author>Adam Koprowski</author>
				<author>Dan Synek</author>
				<author>Eelis van der Weegen</author>
			</authors>
			<title>Automated Machine-Checked Hybrid System Safety Proofs</title>
			<conference>
				<name>Proceedings of the International Conference on Interactive Theorem Proving</name>
				<abbreviation>ITP '10</abbreviation>
				<location>Edinburgh, Scotland</location>
				<url>http://www.floc-conference.org/ITP-home.html</url>
				<series><lncs /></series>
				<volume></volume>
				<pages></pages>
				<note>To appear</note>
			</conference>
			<abstract>
				We have developed a hybrid system safety prover, implemented in Coq using the abstraction method introduced by Alur, Dang 
				and Ivancic (2006). The development includes: a formalisation of the structure of hybrid systems; a framework for the 
				construction of an abstract system (consisting of decidable "over-estimators" of abstract transitions and initiality) 
				faithfully representing a concrete hybrid system; a translation of abstract systems to graphs, enabling the decision of 
				abstract state reachability using a certified graph reachability algorithm; a proof of the safety of an example hybrid 
				system generated using this tool stack. To produce fully certified safety proofs without relying on floating point 
				computations, the development critically relies on the computable real number implementation of the CoRN library of 
				constructive mathematics formalised in Coq. The development also features a nice interplay between constructive and 
				classical logic via the double negation monad.			
			</abstract>
			<download>
				<pdf />
			</download>
		</paper>
		<paper id="trx-ESOP-10">
			<authors>
				<author>Adam Koprowski</author>
				<author>Henri Binsztok</author>
			</authors>
			<title>TRX: A Formally Verified Parser Interpreter</title>
			<conference>
				<name>Proceedings of the 19th European Symposium on Programming</name>
				<abbreviation>ESOP '10</abbreviation>
				<location>Paphos, Cyprus</location>
				<url>http://research.microsoft.com/en-us/um/people/adg/esop2010</url>
				<series><lncs/></series>
				<volume>6012</volume>
				<pages>345-365</pages>			
			</conference>
			<abstract>
				Parsing is an important problem in computer science and yet surprisingly little attention has been devoted to its formal 
				verificatio10n. In this paper, we present TRX: a parser interpreter formally developed in the proof assistant Coq, capable 
				of producing formally correct parsers. We are using parsing expression grammars (PEGs), a formalism essentially 
				representing recursive descent parsing, which we consider an attractive alternative to context-free grammars (CFGs). 
				From this formalization we can extract a parser for an arbitrary PEG grammar with the warranty of total correctness, i.e., 
				the resulting parser is terminating and correct with respect to its grammar and the semantics of PEGs; both properties 
				formally proven in Coq.
			</abstract>
			<download>
				<pdf />
			</download>
		</paper>
	</group>
	
	<group id="2009">
		<paper id="arctic-AC-09">
			<authors>
				<author>Adam Koprowski</author>
				<author>Johannes Waldmann</author>
			</authors>
			<title>Max/Plus Tree Automata for Termination of Term Rewriting</title>
			<journal>
				<name>Acta Cybernetica</name>
				<volume>19</volume>
				<number>1</number>
				<pages>357-392</pages>			
			</journal>
			<abstract>
				<p>We use weighted tree automata as certificates for termination of term rewriting systems. The weights are taken from the 
				arctic semiring: natural numbers extended with -infinity, with the operations 'max' and 'plus'. In order to find and 
				validate these certificates automatically, we restrict their transition functions to be representable by matrix operations 
				in the semiring. The resulting class of weighted tree automata is called path-separated.</p>

				<p>This extends the matrix method for term rewriting and the arctic matrix method for string rewriting. In combination with 
				the dependency pair method, this allows for some conceptually simple termination proofs in cases where only much more 
				involved proofs were known before. We further generalize to arctic numbers 'below zero': integers extended with -infinity. 
				This allows to treat some termination problems with symbols that require a predecessor semantics.</p>

				<p>Correctness of this approach has been formally verified in the Coq proof assistant and the formalization has been 
				contributed to the CoLoR library of certified termination techniques. This allows formal verification of termination 
				proofs using the arctic matrix method in combination with the dependency pair transformation. This contribution brought 
				a substantial performance gain in the certified category of the 2008 edition of the termination competition.</p>

				<p>The method has been implemented by leading termination provers. We report on experiments with its implementation in one 
				such tool, Matchbox, developed by the second author.</p>

				<p>We also show that our method can simulate a previous method of quasi- periodic interpretations, if restricted to 
				interpretations of slope one on unary signatures.</p>				
			</abstract>
			<download>
				<resource>
					<name>from publisher's page</name>
					<url>http://www.inf.u-szeged.hu/actacybernetica/edb/vol19n1/starten.xml</url>
				</resource>
			</download>
		</paper>	
		<paper id="horpo-aaecc-09">
			<authors>
				<author>Adam Koprowski</author>
			</authors>
			<title>Coq formalization of the higher-order recursive path ordering</title>
			<journal>
				<name>Applicable Algebra in Engineering, Communication and Computing (AAECC)</name>
				<volume>20</volume>
				<number>5-6</number>
				<pages>379-425</pages>			
			</journal>
			<abstract>
				The recursive path ordering (RPO) is a well-known reduction ordering introduced by Dershowitz, that is useful for proving 
				termination of term rewriting systems (TRSs). Jouannaud and Rubio generalized this ordering to the higher-order case thus 
				creating the higher-order recursive path ordering (HORPO). They proved that this ordering can be used for proving 
				termination of higher-order TRSs, which essentially comes down to proving well-foundedness of HORPO. This result entails 
				well-foundedness of RPO and termination of simply typed lambda calculus (as the beta-reduction relation is included in 
				HORPO). This paper describes our undertaking of providing a complete, axiom-free, fully constructive formalization of 
				those results in the proof assistant Coq. The formalization can be divided into three parts:
				<ul>
					<li>finite multisets and two variants of multiset extensions of a relation,</li>
					<li>simply typed lambda calculus with termination of beta-reduction as the main result,</li>
					<li>HORPO with a proof of its well-foundedness; also decidability of HORPO has been proved and, due to its constructive nature, a certified algorithm to verify whether two terms can be oriented with HORPO can be extracted from the proof.</li>
				</ul>
			</abstract>
			<download>
				<resource>
					<name>doi: 10.1007/s00200-009-0105-5</name>
					<url>http://dx.doi.org/10.1007/s00200-009-0105-5</url>
				</resource>
			</download>			
		</paper>
		<paper id="color-TR-09">
			<authors>
				<author>Frédéric Blanqui</author>
				<author>Adam Koprowski</author>
			</authors>
			<title>Automated Verification of Certificates for Termination Proofs</title>
			<techreport>
				<type>INRIA Research Report</type>
				<number>6949</number>
				<institution>INRIA</institution>
				<address>Paris, France</address>
				<month>June</month>
			</techreport>
			<abstract>
				Termination is an important property required for total correctness of programs/algorithms. In particular it is a well 
				studied subject in the area of term rewriting, where a number of methods and tools for proving termination has been 
				developed over the years. Ensuring reliability of those tools is an important and challenging issue. In this paper we 
				present a methodology and a tool for the automated verication of the results of such automated termination provers. This 
				is accomplished by means of termination certicates, that can be easily generated by termination provers, and then by the 
				transformation of those certicates into full formal proofs in some proof assistant/checker. This last step is done by 
				formalizing the proofs of termination criteria used in modern termination provers. In this paper we describe the 
				formalization of some of these criteria in the proof assistant Coq and the application of those formalizations in the 
				transformation of termination certicates into termination proofs veriable by Coq.				
			</abstract>
			<download>
				<pdf />
			</download>			
		</paper>
	</group>
	
	<group id="2008">
		<paper id="phd-08">
			<authors>
				<author>Adam Koprowski</author>
			</authors>
			<title>Termination of Rewriting and Its Certification</title>
			<phdthesis>
				<school>Eindhoven University of Technology</school>
				<address>Eindhoven, The Netherlands</address>
				<month>September</month>
				<isbn>978-90-386-1377-2</isbn>
			</phdthesis>
			<img>phd-08-cover.jpg</img>
			<abstract>
				In programming, <emph>termination</emph> of a program/algorithm means that its evaluation will eventually terminate, 
				regardless of the input it receives. It is an important property and is required for <emph>total correctness</emph>. 
				In general the problem is undecidable.<br/>

				<emph>Term rewriting</emph> is a formal way of specifying computation and as such it can be seen as a generic model for 
				programming languages. Termination, here meaning lack of infinite sequences, is a well-studied concept in this context. 
				There exist a number of methods for proving termination as well as a number of tools for doing that automatically. 
				There is an on-going work on application of this methodology and tools to proving termination of programs in actual 
				programming languages. 
				
				In this thesis we first give a short introduction to term rewriting and to termination of rewriting. Subsequently we 
				present a number of contributions to this field, which can be categorized into the following categories: 
				<ul>
					<li>proposing new methods for proving termination and refining the existing ones,</li>
					<li>developing a tool for proving termination and</li>
					<li>proposing a methodology and tools for certification of termination proofs, i.e., formal verification of proofs 
						produced by the existing tools for proving termination.</li>
				</ul>
			</abstract>
			<download>
				<pdf />
			</download>			
		</paper>
		<paper id="arctic-RTA-08">
			<authors>
				<author>Adam Koprowski</author>
				<author>Johannes Waldmann</author>
			</authors>
			<title>Arctic Termination ... Below Zero</title>
			<conference>
				<name>Proceedings of the 19th International Conference on Rewriting Techniques and Applications</name>
				<abbreviation>RTA '08</abbreviation>
				<location>Hagenberg, Austria</location>
				<url>http://www.risc.uni-linz.ac.at/about/conferences/rta2008/</url>
				<series><lncs /></series>
				<volume>5117</volume>
				<pages>202-216</pages>
			</conference>
			<abstract>
				We introduce the arctic matrix method for automatically proving termination of term rewriting. We use vectors and matrices 
				over the arctic semi-ring: natural numbers extended with minus infinity, with the operations "max" and "plus". This extends 
				the matrix method for term rewriting and the arctic matrix method for string rewriting. In combination with the Dependency 
				Pairs transformation, this allows for some conceptually simple termination proofs in cases where only much more involved 
				proofs were known before. We further generalize to arctic numbers "below zero": integers extended with minus infinity. 
				This allows to treat some termination problems with symbols that require a predecessor semantics. The contents of the paper 
				has been formally verified in the Coq proof assistant and the formalization has been contributed to the CoLoR library of 
				certified termination techniques. This allows formal verification of termination proofs using the arctic matrix method. 
				We also report on experiments with an implementation of this method which, compared to results from 2007, outperforms TPA 
				(winner of the certified termination competition for term rewriting), and in the string rewriting category is as powerful 
				as Matchbox was but now all of the proofs are certified.
			</abstract>
			<download>
				<pdf />
			</download>			
		</paper>		
		<paper id="mint-cert-SOFSEM-08">
			<authors>
				<author>Adam Koprowski</author>
				<author>Hans Zantema</author>
			</authors>
			<title>Certification of Proving Termination of Term Rewriting by Matrix Interpretations</title>
			<conference>
				<name>Proceedings of the 34th International Conference on Current Trends in Theory and Practice of Computer Science</name>
				<abbreviation>SOFSEM '08</abbreviation>
				<location>Nový Smokovec, Slovakia</location>
				<url>http://ics.upjs.sk/sofsem08/</url>
				<series><lncs /></series>
				<volume>4910</volume>
				<pages>328-339</pages>
			</conference>
			<abstract>
				We develop a Coq formalization of the matrix interpretation method, which is a recently developed, powerful approach to 
				proving termination of term rewriting. Our formalization is a contribution to the CoLoR project and allows to automatically 
				certify matrix interpretation proofs produced by tools for proving termination. Thanks to this development the combination 
				of CoLoR and our tool, TPA, was the winner in 2007 in the new certified category of the annual Termination Competition.
			</abstract>
			<download>
				<pdf />
			</download>			
		</paper>		
	</group>

	<group id="2007">
		<paper id="predlab-CADE-07">
			<authors>
				<author>Adam Koprowski</author>
				<author>Aart Middeldorp</author>
			</authors>
			<title>Predictive Labeling with Dependency Pairs using SAT</title>
			<conference>
				<name>Proceedings of the 21st International Conference on Automated Deduction</name>
				<abbreviation>CADE '07</abbreviation>
				<location>Bremen, Germany</location>
				<url>http://www.cadeconference.org/meetings/cade21</url>
 				<series><lnai/></series>
 				<volume>4603</volume>
 				<pages>410-425</pages>
			</conference>
			<abstract>
				This paper combines predictive labeling with dependency pairs and reports on its implementation. Our starting point is 
				the method of proving termination of rewrite systems using semantic labeling with infinite models in combination with 
				lexicographic path orders. We replace semantic labeling with predictive labeling to weaken the quasi-model constraints 
				and we combine it with dependency pairs (usable rules and argument filtering) to increase the power of the method. 
				Encoding the resulting search problem as a propositional satisfiability problem and calling a state-of-the-art SAT solver 
				yields a powerful technique for proving termination automatically.
			</abstract>
			<download>
				<pdf/>
			</download>
		</paper>
		<paper id="mint-cert-WST-07">
			<authors>
				<author>Adam Koprowski</author>
				<author>Hans Zantema</author>
			</authors>
			<title>Certification of Matrix Interpretations in Coq</title>
			<workshop-proceedings>
				<name>Proceedings of the 9th International Workshop on Termination</name>
				<abbreviation>WST '07</abbreviation>
				<location>Paris, France</location>
				<url>http://www.lsv.ens-cachan.fr/rdp07/wst.html</url>
				<pages>9-12</pages>
			</workshop-proceedings>
			<abstract>
				We describe how to certify the matrix interpretations method for proving termination of term rewriting in the theorem 
				prover Coq. Certification requires both formalization of the underlying theory of monotone algebras and their instantiation 
				to vectors and matrices as they are used in the matrix method; as well as a mechanism to deal with concrete examples, 
				based on those theoretical results.			
			</abstract>
			<download>
				<pdf/>
			</download>
		</paper>
	</group>
	
	<group id="2006">
		<paper id="horpo-TR-06">
			<authors>
				<author>Adam Koprowski</author>
			</authors>
			<title>Coq formalization of the Higher-Order Recursive Path Ordering</title>
			<techreport>
				<type>Technical Report</type>
				<number>CSR-06-21</number>
				<institution>Eindhoven University of Technology</institution>
				<address>Eindhoven, The Netherlands</address>
				<month>August</month>
			</techreport>
			<abstract>
				<p>Recursive path ordering (RPO) is a well-known reduction ordering introduced by Dershowitz, that is useful for proving 
				termination of term rewriting systems (TRSs). Jouannaud and Rubio generalized this ordering to the higher-order case 
				thus creating the higher-order recursive path ordering (HORPO). They proved that this ordering can be used for proving 
				termination of higher-order TRSs which essentially comes down to proving well-foundedness of the union of HORPO and the 
				bete reduction relation of the simply typed lambda calculus. This result entails well-foundedness of RPO and termination 
				of simply typed lambda calculus.</p>
				<p>This paper describes author's undertaking of providing a complete, axiom-free, fully constructive formalization of those 
				results in the theorem prover Coq. Formalization is complete and hence it contains all the dependant results. It can be 
				divided into three parts:</p>
				<ul>
					<li>finite multisets and two variants of multiset extensions of a relation,</li>
					<li>simply typed lambda calculus with termination of beta-reduction as the main result,</li>
					<li>HORPO with proof of well-foundedness of its union with beta-reduction. Also decidability of HORPO has been proven 
					and due to the constructive nature of this proof a certified algorithm to verify whether two terms can be oriented 
					with HORPO can be extracted from this proof.</li>
				</ul>			
			</abstract>
			<download>
				<pdf/>
			</download>
		</paper>
		<paper id="stlc-draft-06">
			<authors>
				<author>Adam Koprowski</author>
			</authors>
			<title>A Formalization of the Simply Typed Lambda Calculus in Coq</title>
			<unpublished>
				<note>Draft</note>
			</unpublished>
			<abstract>
				In this paper we present a formalization of the simply typed lambda calculus with constants and with typing `a la Church. 
				It has been accomplished using the theorem prover Coq. The formalization includes, among other results, definitions of 
				typed terms over arbitrary many-sorted signature, a substitution operating on typing judgements, an equivalence relation 
				generalizing the concept of alpha-convertibility to free variables and a proof of strong normalization of beta-reduction. 
				The formalization has been used in a bigger project of certification of the higher-order recursive path ordering where 
				well-foundedness of the union of the higher-order recursive path ordering and beta-reduction was the main result.			
			</abstract>
			<download>
				<pdf/>
				<ps/>
			</download>
		</paper>
		<paper id="horpo-RTA-06">
			<authors>
				<author>Adam Koprowski</author>
			</authors>
			<title>Certified Higher-Order Recursive Path Ordering</title>
			<conference>
				<name>Proceedings of the 17th International Conference on Rewriting Techniques and Applications</name>
				<abbreviation>RTA '06</abbreviation>
				<location>Seattle, WA, USA</location>
				<url>http://www.easychair.org/FLoC-06/RTA.html</url>
				<series><lncs /></series>
				<volume>4098</volume>
				<pages>227-241</pages>
			</conference>
			<abstract>
				The paper reports on a formalization of a proof of well-foundedness of the higher-order recursive path ordering (HORPO) 
				in the proof checker Coq. The development is axiom-free and fully constructive. Three substantive parts that could be 
				used also in other developments are the formalizations of the simply-typed lambda calculus, of finite multisets and of 
				the multiset ordering. The Coq code consists of more than 1000 lemmas and 300 definitions.
			</abstract>
			<download>
				<pdf />
				<ps />
			</download>
		</paper>
		<paper id="slnat-IJCAR-06">
			<authors>
				<author>Adam Koprowski</author>
				<author>Hans Zantema</author>
			</authors>
			<title>Automation of Recursive Path Ordering for Infinite Labelled Rewrite Systems</title>
			<conference>
				<name>Proceedings of the 3rd International Joint Conference on Automated Reasoning</name>
				<abbreviation>IJCAR '06</abbreviation>
				<location>Seattle, WA, USA</location>
				<url>http://www.easychair.org/FLoC-06/IJCAR.html</url>
				<series><lncs /></series>
				<volume>4130</volume>
				<pages>332-346</pages>
			</conference>
			<abstract>
				Semantic labelling is a transformational technique for proving termination of Term Rewriting Systems (TRSs). Only its 
				variant with finite sets of labels was used so far in tools for automatic termination proving and variants with infinite 
				sets of labels were considered not to be suitable for automation. We show that such automation can be achieved for semantic 
				labelling with natural numbers, in combination with recursive path ordering (RPO). In order to do so we developed 
				algorithms to deal with recursive path ordering for these infinite labelled systems. Using these techniques TPA, a tool 
				developed by the first author, is the only current tool that can prove termination of the SUBST system automatically.			
			</abstract>
			<download>
				<pdf />
				<ps />
			</download>
		</paper>
		<paper id="tpa-RTA-06">
			<authors>
				<author>Adam Koprowski</author>
			</authors>
			<title>TPA: Termination Proved Automatically</title>
			<conference>
				<name>Proceedings of the 17th International Conference on Rewriting Techniques and Applications</name>
				<abbreviation>RTA '06</abbreviation>
				<location>Seattle, WA, USA</location>
				<url>http://www.easychair.org/FLoC-06/RTA.html</url>
				<series><lncs /></series>
				<volume>4098</volume>
				<pages>257-266</pages>
			</conference>
			<abstract>
				TPA is a tool for proving termination of term rewrite systems (TRSs) in a fully automated fashion. The distinctive feature 
				of TPA is the support for relative termination and the use of the technique of semantic labelling with natural numbers. 
				Thanks to the latter, TPA is capable of delivering automated termination proofs for some difficult TRSs for which all other 
				tools fail.
			</abstract>
			<download>
				<pdf />
				<ps />
			</download>
		</paper>
		<paper id="color-WST-06">
			<authors>
				<author>Frédéric Blanqui</author>
				<author>William Delobel</author>
				<author>Solange Coupet-Grimal</author>
				<author>Sébastien Hinderer</author>
				<author>Adam Koprowski</author>
			</authors>
			<title>CoLoR, a Coq Library on Rewriting and termination</title>
			<workshop-proceedings>
				<name>Proceedings of the 8th International Workshop on Termination</name>
				<abbreviation>WST '06</abbreviation>
				<location>Seattle, WA, USA</location>
				<pages>69-73</pages>
			</workshop-proceedings>
			<abstract>
				Coq is a tool allowing to certify proofs. This paper describes a Coq library for certifying termination proofs.
			</abstract>
			<download>
				<ps/>
				<pdf/>
			</download>
		</paper>
	</group>

	<group id="2005">
		<paper id="liv-IFM-05">
			<authors>
				<author>Adam Koprowski</author>
			</authors>
			<title>Application of Rewriting Techniques to Verification Problems</title>
			<workshop-proceedings>
				<name>Proceedings of the Doctoral Symposium on Integrated Formal Methods</name>
				<abbreviation>IFM '05</abbreviation>
				<location>Eindhoven, The Netherlands</location>
				<pages>76-80</pages>
			</workshop-proceedings>
			<abstract>
				The goal of the project is to employ techniques from term rewriting to verification problems. The relationship between 
				liveness properties and termination of term rewrite systems (TRSs) is of particular interest. The emphasis is on the 
				investigation of such properties for infinite state space systems where standard model checking techniques fail. Next 
				to developing the necessary underlying theory and performing a case study analysis, the possibility to automate this 
				approach is of great importance. In this paper we discuss the motivation of such work, present the results obtained 
				so far, discuss related work and present plans for the further research.			
			</abstract>
			<download>
				<pdf/>	
				<ps/>
			</download>
		</paper>
		<paper id="livfair-FROCOS-05">
			<authors>
				<author>Adam Koprowski</author>
				<author>Hans Zantema</author>
			</authors>
			<title>Proving Liveness with Fairness using Rewriting</title>
			<conference>
				<name>Proceedings of the 5th International Workshop on Frontiers of Combining Systems</name>
				<abbreviation>FroCoS '05</abbreviation>
				<location>Vienna, Austria</location>
				<url>http://www.logic.at/frocos05/</url>
				<series><lncs /></series>
				<volume>3717</volume>
				<pages>232-247</pages>			
			</conference>
			<abstract>
 				In this paper we combine rewriting techniques with verification issues. More precisely, we show how techniques for 
 				proving relative termination of term rewrite systems (TRSs) can be applied to prove liveness properties in fair 
 				computations. We do this using a new transformation which is stronger than the sound transformation from 
 				(Giesl, Zantema, 2003) but still is suitable for automation. On the one hand we show completeness of this approach 
 				under some mild conditions. On the other hand we show how this approach applies to some examples completely automatically, 
 				using the TPA tool designed for proving relative termination of TRSs. In particular we succeed in proving liveness in the 
 				classical readers-writers synchronization problem.
 			</abstract>	
 			<download>
 				<pdf/>
 				<ps/>
 			</download>	
		</paper>
	</group>

	<group id="2004">
		<paper id="horpo-MTh-04">
			<authors>
				<author>Adam Koprowski</author>
			</authors>
			<title>Well-foundedness of the Higher Order Recursive Path Ordering in Coq.</title>
			<masterthesis>
				<school>Vrije Universiteit</school>
				<address>Amsterdam, The Netherlands</address>
				<month>August</month>
			</masterthesis>
			<abstract>
				<p>This paper presents the formalization of the proof of well-foundedness of the higher-order recursive path ordering 
				using Coq theorem prover. Both definition of the ordering and the proof are due to Jouannaud and Rubio.</p>
				
				<p>The Coq formalization is complete except for computability properties that are left as axioms. As higher-order 
				rewriting uses simply typed lambda calculus as the meta-language, formalization contains many results from that field 
				as well. Also theory of multisets has been formalized.</p>			
			</abstract>
			<download>
				<pdf/>
				<ps/>
			</download>
		</paper>
		<paper id="rpo-PTD-04">
			<authors>
				<author>Nicole de Kleijn</author>
				<author>Adam Koprowski</author>
				<author>Femke van Raamsdonk</author>
			</authors>
			<title>Well-foundedness of the Recursive Path Ordering in Coq</title>
			<workshop-proceedings>
				<name>Dutch Proof Tools Day 2004</name>
				<location>Nijmegen, The Netherlands</location>
				<pages>53-68</pages>
			</workshop-proceedings>
			<abstract>
				One of the important methods to prove termination of term rewriting is based on Dershowitz' recursive path ordering (RPO). 
				A rewrite system is terminating if we have l > r in the RPO for every rewrite rule l -> r. A key step in the correctness 
				proof of this method is to show that RPO is well-founded. Originally this is shown using Kruskal's Tree Theorem. An 
				alternative is to proceed by induction on the definition of terms. We discuss a formalization of the latter proof in Coq.
				Higher-order rewriting, where bound variables may be present, for a long time lacked methods to prove termination. 
				An important step forward was the generalization of RPO to the higher-order case (HORPO) by Jouannaud and Rubio. As in 
				the first-order case, a key step is to show well-foundedness of the ordering. There is no suitable higher-order version 
				of Kruskal's Tree Theorem; the proof by Jouannaud and Rubio proceeds by induction on the definition of terms and uses 
				the computability predicate. We discuss a formalization of the proof of well-foundedness in Coq. The formalized proof 
				for the first-order case is actually found as a specialization of the proof for the higher-order case.
				This is work in progress.			
			</abstract>
			<download>
				<ps/>
				<pdf/>
			</download>
		</paper>	
	</group>

</papers>
